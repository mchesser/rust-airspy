/* automatically generated by rust-bindgen */

#![allow(bad_style)]

pub const AIRSPY_CONF_CMD_SHIFT_BIT: ::std::os::raw::c_uint = 3;
pub const AIRSPY_CMD_MAX: ::std::os::raw::c_uint = 27;
pub const AIRSPY_VERSION: &'static [u8; 6usize] = b"1.0.9\0";
pub const AIRSPY_VER_MAJOR: ::std::os::raw::c_uint = 1;
pub const AIRSPY_VER_MINOR: ::std::os::raw::c_uint = 0;
pub const AIRSPY_VER_REVISION: ::std::os::raw::c_uint = 9;
pub const MAX_CONFIG_PAGE_SIZE: ::std::os::raw::c_uint = 65536;
pub const receiver_mode_t_RECEIVER_MODE_OFF: receiver_mode_t = 0;
pub const receiver_mode_t_RECEIVER_MODE_RX: receiver_mode_t = 1;
pub type receiver_mode_t = ::std::os::raw::c_int;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_samplerate_t {
    AIRSPY_SAMPLERATE_10MSPS = 0,
    AIRSPY_SAMPLERATE_2_5MSPS = 1,
    AIRSPY_SAMPLERATE_END = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_vendor_request {
    AIRSPY_INVALID = 0,
    AIRSPY_RECEIVER_MODE = 1,
    AIRSPY_SI5351C_WRITE = 2,
    AIRSPY_SI5351C_READ = 3,
    AIRSPY_R820T_WRITE = 4,
    AIRSPY_R820T_READ = 5,
    AIRSPY_SPIFLASH_ERASE = 6,
    AIRSPY_SPIFLASH_WRITE = 7,
    AIRSPY_SPIFLASH_READ = 8,
    AIRSPY_BOARD_ID_READ = 9,
    AIRSPY_VERSION_STRING_READ = 10,
    AIRSPY_BOARD_PARTID_SERIALNO_READ = 11,
    AIRSPY_SET_SAMPLERATE = 12,
    AIRSPY_SET_FREQ = 13,
    AIRSPY_SET_LNA_GAIN = 14,
    AIRSPY_SET_MIXER_GAIN = 15,
    AIRSPY_SET_VGA_GAIN = 16,
    AIRSPY_SET_LNA_AGC = 17,
    AIRSPY_SET_MIXER_AGC = 18,
    AIRSPY_MS_VENDOR_CMD = 19,
    AIRSPY_SET_RF_BIAS_CMD = 20,
    AIRSPY_GPIO_WRITE = 21,
    AIRSPY_GPIO_READ = 22,
    AIRSPY_GPIODIR_WRITE = 23,
    AIRSPY_GPIODIR_READ = 24,
    AIRSPY_GET_SAMPLERATES = 25,
    AIRSPY_SET_PACKING = 26,
    AIRSPY_SPIFLASH_ERASE_SECTOR = 27,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_common_config_pages_t {
    CONFIG_CALIBRATION = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_gpio_port_t {
    GPIO_PORT0 = 0,
    GPIO_PORT1 = 1,
    GPIO_PORT2 = 2,
    GPIO_PORT3 = 3,
    GPIO_PORT4 = 4,
    GPIO_PORT5 = 5,
    GPIO_PORT6 = 6,
    GPIO_PORT7 = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_gpio_pin_t {
    GPIO_PIN0 = 0,
    GPIO_PIN1 = 1,
    GPIO_PIN2 = 2,
    GPIO_PIN3 = 3,
    GPIO_PIN4 = 4,
    GPIO_PIN5 = 5,
    GPIO_PIN6 = 6,
    GPIO_PIN7 = 7,
    GPIO_PIN8 = 8,
    GPIO_PIN9 = 9,
    GPIO_PIN10 = 10,
    GPIO_PIN11 = 11,
    GPIO_PIN12 = 12,
    GPIO_PIN13 = 13,
    GPIO_PIN14 = 14,
    GPIO_PIN15 = 15,
    GPIO_PIN16 = 16,
    GPIO_PIN17 = 17,
    GPIO_PIN18 = 18,
    GPIO_PIN19 = 19,
    GPIO_PIN20 = 20,
    GPIO_PIN21 = 21,
    GPIO_PIN22 = 22,
    GPIO_PIN23 = 23,
    GPIO_PIN24 = 24,
    GPIO_PIN25 = 25,
    GPIO_PIN26 = 26,
    GPIO_PIN27 = 27,
    GPIO_PIN28 = 28,
    GPIO_PIN29 = 29,
    GPIO_PIN30 = 30,
    GPIO_PIN31 = 31,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_error {
    AIRSPY_SUCCESS = 0,
    AIRSPY_TRUE = 1,
    AIRSPY_ERROR_INVALID_PARAM = -2,
    AIRSPY_ERROR_NOT_FOUND = -5,
    AIRSPY_ERROR_BUSY = -6,
    AIRSPY_ERROR_NO_MEM = -11,
    AIRSPY_ERROR_LIBUSB = -1000,
    AIRSPY_ERROR_THREAD = -1001,
    AIRSPY_ERROR_STREAMING_THREAD_ERR = -1002,
    AIRSPY_ERROR_STREAMING_STOPPED = -1003,
    AIRSPY_ERROR_OTHER = -9999,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_board_id {
    AIRSPY_BOARD_ID_PROTO_AIRSPY = 0,
    AIRSPY_BOARD_ID_INVALID = 255,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum airspy_sample_type {
    AIRSPY_SAMPLE_FLOAT32_IQ = 0,
    AIRSPY_SAMPLE_FLOAT32_REAL = 1,
    AIRSPY_SAMPLE_INT16_IQ = 2,
    AIRSPY_SAMPLE_INT16_REAL = 3,
    AIRSPY_SAMPLE_UINT16_REAL = 4,
    AIRSPY_SAMPLE_RAW = 5,
    AIRSPY_SAMPLE_END = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspy_device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspy_transfer_t {
    pub device: *mut airspy_device,
    pub ctx: *mut ::std::os::raw::c_void,
    pub samples: *mut ::std::os::raw::c_void,
    pub sample_count: ::std::os::raw::c_int,
    pub dropped_samples: u64,
    pub sample_type: airspy_sample_type,
}
#[test]
fn bindgen_test_layout_airspy_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<airspy_transfer_t>(),
        48usize,
        concat!("Size of: ", stringify!(airspy_transfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<airspy_transfer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(airspy_transfer_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).device as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).ctx as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).samples as *const _ as usize },
        16usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).sample_count as *const _ as usize },
        24usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(sample_count)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).dropped_samples as *const _ as usize },
        32usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(dropped_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_transfer_t)).sample_type as *const _ as usize },
        40usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_transfer_t),
            "::",
            stringify!(sample_type)
        )
    );
}
pub type airspy_transfer = airspy_transfer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspy_read_partid_serialno_t {
    pub part_id: [u32; 2usize],
    pub serial_no: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_airspy_read_partid_serialno_t() {
    assert_eq!(
        ::std::mem::size_of::<airspy_read_partid_serialno_t>(),
        24usize,
        concat!("Size of: ", stringify!(airspy_read_partid_serialno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<airspy_read_partid_serialno_t>(),
        4usize,
        concat!("Alignment of ", stringify!(airspy_read_partid_serialno_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_read_partid_serialno_t)).part_id as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_read_partid_serialno_t),
            "::",
            stringify!(part_id)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_read_partid_serialno_t)).serial_no as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_read_partid_serialno_t),
            "::",
            stringify!(serial_no)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct airspy_lib_version_t {
    pub major_version: u32,
    pub minor_version: u32,
    pub revision: u32,
}
#[test]
fn bindgen_test_layout_airspy_lib_version_t() {
    assert_eq!(
        ::std::mem::size_of::<airspy_lib_version_t>(),
        12usize,
        concat!("Size of: ", stringify!(airspy_lib_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<airspy_lib_version_t>(),
        4usize,
        concat!("Alignment of ", stringify!(airspy_lib_version_t))
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_lib_version_t)).major_version as *const _ as usize },
        0usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_lib_version_t),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_lib_version_t)).minor_version as *const _ as usize },
        4usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_lib_version_t),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe { &(*(0 as *const airspy_lib_version_t)).revision as *const _ as usize },
        8usize,
        concat!(
            "Alignment of field: ",
            stringify!(airspy_lib_version_t),
            "::",
            stringify!(revision)
        )
    );
}
pub type airspy_sample_block_cb_fn = ::std::option::Option<
    unsafe extern "C" fn(transfer: *mut airspy_transfer)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn airspy_lib_version(lib_version: *mut airspy_lib_version_t);
}
extern "C" {
    pub fn airspy_init() -> airspy_error;
}
extern "C" {
    pub fn airspy_exit() -> airspy_error;
}
extern "C" {
    pub fn airspy_open_sn(
        device: *mut *mut airspy_device,
        serial_number: u64,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_open(device: *mut *mut airspy_device) -> airspy_error;
}
extern "C" {
    pub fn airspy_close(device: *mut airspy_device) -> airspy_error;
}
extern "C" {
    pub fn airspy_get_samplerates(
        device: *mut airspy_device,
        buffer: *mut u32,
        len: u32,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_samplerate(
        device: *mut airspy_device,
        samplerate: u32,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_conversion_filter_float32(
        device: *mut airspy_device,
        kernel: *const f32,
        len: u32,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_conversion_filter_int16(
        device: *mut airspy_device,
        kernel: *const i16,
        len: u32,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_start_rx(
        device: *mut airspy_device,
        callback: airspy_sample_block_cb_fn,
        rx_ctx: *mut ::std::os::raw::c_void,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_stop_rx(device: *mut airspy_device) -> airspy_error;
}
extern "C" {
    pub fn airspy_is_streaming(device: *mut airspy_device) -> airspy_error;
}
extern "C" {
    pub fn airspy_si5351c_write(
        device: *mut airspy_device,
        register_number: u8,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_si5351c_read(
        device: *mut airspy_device,
        register_number: u8,
        value: *mut u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_config_write(
        device: *mut airspy_device,
        page_index: u8,
        length: u16,
        data: *mut ::std::os::raw::c_uchar,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_config_read(
        device: *mut airspy_device,
        page_index: u8,
        length: u16,
        data: *mut ::std::os::raw::c_uchar,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_r820t_write(
        device: *mut airspy_device,
        register_number: u8,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_r820t_read(
        device: *mut airspy_device,
        register_number: u8,
        value: *mut u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_gpio_write(
        device: *mut airspy_device,
        port: airspy_gpio_port_t,
        pin: airspy_gpio_pin_t,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_gpio_read(
        device: *mut airspy_device,
        port: airspy_gpio_port_t,
        pin: airspy_gpio_pin_t,
        value: *mut u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_gpiodir_write(
        device: *mut airspy_device,
        port: airspy_gpio_port_t,
        pin: airspy_gpio_pin_t,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_gpiodir_read(
        device: *mut airspy_device,
        port: airspy_gpio_port_t,
        pin: airspy_gpio_pin_t,
        value: *mut u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_spiflash_erase(device: *mut airspy_device) -> airspy_error;
}
extern "C" {
    pub fn airspy_spiflash_write(
        device: *mut airspy_device,
        address: u32,
        length: u16,
        data: *const ::std::os::raw::c_uchar,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_spiflash_read(
        device: *mut airspy_device,
        address: u32,
        length: u16,
        data: *mut ::std::os::raw::c_uchar,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_board_id_read(
        device: *mut airspy_device,
        value: *mut u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_version_string_read(
        device: *mut airspy_device,
        version: *mut ::std::os::raw::c_char,
        length: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_board_partid_serialno_read(
        device: *mut airspy_device,
        read_partid_serialno: *mut airspy_read_partid_serialno_t,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_sample_type(
        device: *mut airspy_device,
        sample_type: airspy_sample_type,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_freq(device: *mut airspy_device, freq_hz: u32) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_lna_gain(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_mixer_gain(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_vga_gain(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_lna_agc(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_mixer_agc(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_linearity_gain(
        device: *mut airspy_device,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_sensitivity_gain(
        device: *mut airspy_device,
        value: u8,
    ) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_rf_bias(dev: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_set_packing(device: *mut airspy_device, value: u8) -> airspy_error;
}
extern "C" {
    pub fn airspy_error_name(errcode: airspy_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn airspy_board_id_name(board_id: airspy_board_id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn airspy_spiflash_erase_sector(
        device: *mut airspy_device,
        sector_num: u16,
    ) -> airspy_error;
}
